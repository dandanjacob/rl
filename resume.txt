## Resumo
 Trabalho elaborado por Breno Marquez Azevedo e Daniel Jacob Tonn para avaliação da disciplina
de Reforcement Learning, coordenada pelo professor Flávio Codeço Coelho, com objetivo de  criar
um ambiente de simulação onde agentes de aprendizado de máquina podem aprender a jogar o jogo com 
eficiência. O projeto consiste em criar um ambiente de aprendizado de máquina parao jogo "Assault"
utilizando a biblioteca Gymnasium em Python. 

## O jogo
Assault consiste em jogo de tiro em 2D, onde o jogador controla um personagem, normalmente
 presente na parte inferior da tela, movendo-o para os lados e atirando contra inimigos (estes 
 presentes majoritariamente na parte superior da tela). A complexidade dos movimentos, tiros e 
 inimigos pode variar conforme as fases do jogo avançarem. O objetivo final é alcançar a maior 
 pontuação - avançar o maior número de fases - sem que o personagem controlado seja atingido. 

### Estados
Os estados são as informações que o agente recebe do ambiente. No jogo "Assault", os estados são
 as informações sobre a posição do personagem, a posição dos inimigos, a quantidade de munição e
 a quantidade de vidas restantes.
 O espaço de observação é matriz (array) de 3 canais (RGB), onde cada canal é um número inteiro sem 
 sinal (uint8) variando de 0 a 255. A forma da matriz é (210, 160, 3), ou seja, 210 linhas, 160 colunas.
O espaço de observação é contínuo e, portanto, você pode ter qualquer valor real dentro do intervalo
 especificado. Em outras palavras, o espaço de observação é uma imagem.


### Ações
As ações são as escolhas que os agentes podem fazer em um determinado estado. No jogo "Assault", as
 ações são atirar e andar, como descritas abaixo.
 Num  | Action
 0    | NOOP
 1    | FIRE
 2    | UP
 3    | RIGHT
 4    | LEFT
 5    | RIGHTFIRE
 6    | LEFTFIRE

### Recompensas
As recompensas e punições são
VALOR | AÇÃO
    | acertar um inimigo
    | 

### Solução
Como o espaço de observação é uma imagem, a solução proposta para o problema é a utilização do 
algoritmo DQN (Deep Q-Network), que é um algoritmo de aprendizado por reforço que utiliza redes neurais. 

#referencias
->https://pytorch.org/tutorials/intermediate/reinforcement_q_learning.html